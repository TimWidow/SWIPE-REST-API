# Generated by Django 3.2.9 on 2021-11-19 03:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='UA', unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='images/user/', verbose_name='Аватар')),
                ('subscribe', models.BooleanField(default=False)),
                ('subscribe_expired', models.DateTimeField(blank=True, null=True)),
                ('notification', models.CharField(choices=[('ME', 'Мне'), ('MEANDAGENT', 'Мне и агенту'), ('AGENT', 'Агенту'), ('OFF', 'Отключить')], default='ME', max_length=10)),
                ('role', models.CharField(choices=[('USER', 'Клиент'), ('AGENT', 'Агент'), ('NOTARY', 'Нотариус'), ('DEPART', 'Отдел продаж'), ('SYSTEM', 'Администрация Swipe')], default='USER', max_length=8)),
                ('agent_first_name', models.CharField(blank=True, max_length=150, verbose_name='agent first name')),
                ('agent_last_name', models.CharField(blank=True, max_length=150, verbose_name='agent last name')),
                ('agent_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('agent_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='UA')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.CharField(choices=[('Документ собственности', 'Документ собственности'), ('Доверенность', 'Доверенность')], max_length=255, verbose_name='Документ')),
                ('room_count', models.IntegerField(verbose_name='Количество комнат')),
                ('apartment_type', models.CharField(choices=[('Апартаменты', 'Апартаменты'), ('Пентхаус', 'Пентхаус')], max_length=255, verbose_name='Аппартаменты')),
                ('apartment_status', models.CharField(choices=[('Черновая отделка', 'Черновая отделка'), ('Требует ремонта', 'Требует ремонта'), ('Требуется капитальный ремонт', 'Требуется капитальный ремонт')], max_length=255, verbose_name='Жилое состояние')),
                ('apartment_area', models.FloatField(verbose_name='Площадь квартиры')),
                ('kitchen_area', models.FloatField(verbose_name='Площадь кухни')),
                ('loggia', models.BooleanField(default=False, verbose_name='Балкон/лоджия')),
                ('heating_type', models.CharField(choices=[('Газовое', 'Газовое'), ('Дрова', 'Дрова')], max_length=255)),
                ('settlement_type', models.CharField(choices=[('Мат. капитал', 'Мат. капитал'), ('Ипотека', 'Ипотека')], max_length=255)),
                ('contact', models.CharField(choices=[('Звонок', 'Звонок'), ('Звонок + сообщение', 'Звонок + сообщение')], max_length=255)),
                ('commission', models.IntegerField()),
                ('description', models.TextField()),
                ('price', models.IntegerField()),
                ('main_image', models.ImageField(upload_to='image/')),
                ('address', models.CharField(max_length=255)),
                ('adv_type', models.CharField(choices=[('Первичный рынок', 'Первичный рынок'), ('Вторичный рынок', 'Вторичный рынок')], max_length=255)),
                ('apart_class', models.CharField(choices=[('Студия', 'Студия'), ('Студия, санузел', 'Студия, санузел')], max_length=255)),
                ('is_actual', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('house_status', models.CharField(choices=[('Квартиры', 'Квартиры'), ('Офис', 'Офис')], max_length=55)),
                ('building_technologies', models.CharField(choices=[('Монолитный каркас с керамзитом', 'Монолитный каркас с керамзитом'), ('Панельные', 'Панельные')], max_length=255)),
                ('house_type', models.CharField(choices=[('Многоквартирный', 'Многоквартирный'), ('Частный', 'Частный')], max_length=255)),
                ('territory_type', models.CharField(choices=[('Закрытая, охраняемая', 'Закрытая, охраняемая'), ('Открытая', 'Открытая')], max_length=255)),
                ('current_status', models.CharField(choices=[('Сдан', 'Сдан'), ('Не сдан', 'Не сдан')], max_length=255)),
                ('distance_to_sea', models.FloatField()),
                ('registration_type', models.CharField(max_length=255, verbose_name='Оформление')),
                ('invoice_type', models.CharField(choices=[('Платежи', 'Платежи'), ('Автоплатеж', 'Автоплатеж')], max_length=255, verbose_name='Коммунальные платежи')),
                ('invoice_options', models.CharField(max_length=255, verbose_name='Варианты расчёта')),
                ('purpose', models.CharField(max_length=255, verbose_name='Назначение')),
                ('contract_amount', models.CharField(max_length=255, verbose_name='Сумма в договоре')),
                ('celling_height', models.FloatField(null=True)),
                ('gas', models.BooleanField(default=False)),
                ('heating', models.CharField(choices=[('Центральное', 'Центральное'), ('Личное', 'Личное')], max_length=255, null=True)),
                ('water', models.CharField(choices=[('Канализация', 'Канализация'), ('Яма', 'Яма')], max_length=255)),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Большое объявление', 'Большое объявление'), ('Поднять объявление', 'Поднять объявление'), ('Турбо', 'Турбо')], max_length=255, null=True)),
                ('phrase', models.CharField(choices=[('Подарок при покупке', 'Подарок при покупке'), ('Возможен торг', 'Возможен торг'), ('Квартира у моря', 'Квартира у моря'), ('В спальном районе', 'В спальном районе'), ('Вам повезло с ценой', 'Вам повезло с ценой'), ('Для большой семьи', 'Для большой семьи'), ('Семейное гнёздышко', 'Семейное гнёздышко'), ('Отдельная парковка', 'Отдельная парковка')], max_length=255, null=True, verbose_name='Фраза')),
                ('color', models.CharField(choices=[('Красный', 'Красный'), ('Зелёный', 'Зелёный'), ('Синий', 'Синий'), ('Желтый', 'Желтый')], max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserApartRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.apartment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Секция')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.house')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_recipient', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HouseNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок новости')),
                ('description', models.TextField(verbose_name='Описание новости')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.house', verbose_name='ЖК')),
            ],
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Этаж')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.section')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='file/')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.house')),
            ],
        ),
        migrations.AddField(
            model_name='apartment',
            name='floor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.floor', verbose_name='Этаж'),
        ),
        migrations.AddField(
            model_name='apartment',
            name='house',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.house', verbose_name='ЖК'),
        ),
        migrations.AddField(
            model_name='apartment',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Владелец объявления'),
        ),
        migrations.AddField(
            model_name='apartment',
            name='promotion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.promotion'),
        ),
        migrations.CreateModel(
            name='ApartImgRelations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='image/')),
                ('apart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.apartment')),
            ],
        ),
    ]
